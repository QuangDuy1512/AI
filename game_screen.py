
import pygame
import time
from utils.button import Button
from puzzle import PuzzleBoard
from A_star import a_star, manhattan_distance, misplaced_tiles, tiles_out_of_row_and_column
import os
import random
import copy

""" Thi·∫øt k·∫ø c√°c n√∫t ch·ª©c nƒÉng """
image_btn =   Button((0,  80, 200, 60), "IMAGE")
support_btn = Button((0, 140, 200, 60), "SUPPORT")
reset_btn =   Button((0, 200, 200, 60), "PLAY AGAIN")
quit_btn =    Button((0, 260, 200, 60), "MENU")
heuristic_btn = Button((800, 80, 200, 60), "HEURISTIC")
font = pygame.font.SysFont("Times New Roman", 28, True)

""" H√†m v·∫Ω m√†n h√¨nh game """
def draw_game_screen(screen, game_data): 
    screen.fill((30, 30, 30))

    # Sidebar tr√°i
    sidebar = pygame.Rect(0, 0, screen.get_width() // 5, screen.get_height()) # V·ªã tr√≠ (0,0) - g√≥c tr√™n b√™n tr√°i, r·ªông = 1/4 r·ªông m√†n h√¨nh, cao = cao m√†n h√¨nh
    pygame.draw.rect(screen, (230, 230, 250), sidebar)
    # Sidebar ph·∫£i 
    sidebar_right = pygame.Rect( screen.get_width() * 4 // 5,  0,screen.get_width() // 5,  screen.get_height() )
    pygame.draw.rect(screen, (230, 230, 250), sidebar_right)


    # T√≠nh th·ªùi gian ch∆°i game
    if game_data.get("solved"):
        elapsed = int(game_data["end_time"] - game_data["start_time"])
    else:
        elapsed = int(time.time() - game_data["start_time"]) # T√≠nh th·ªùi gian ƒë√£ tr√¥i qua k·ªÉ t·ª´ khi b·∫Øt ƒë·∫ßu tr√≤ ch∆°i b·∫±ng c√°ch l·∫•y th·ªùi gian hi·ªán t·∫°i tr·ª´ ƒëi th·ªùi gian b·∫Øt ƒë·∫ßu ƒë∆∞·ª£c l∆∞u trong game_data.
    time_txt = font.render(f" Time: {elapsed}s", True, (0, 0, 0))
    screen.blit(time_txt, (30, 10))

    for button in [image_btn, support_btn, reset_btn, quit_btn, heuristic_btn]:
        button.check_hover(pygame.mouse.get_pos())
        button.draw(screen)

    draw_board(game_data['board'], screen, game_data)  # G·ªçi h√†m ƒë·ªÉ v·∫Ω tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa b·∫£ng tr√≤ ch∆°i l√™n m√†n h√¨nh
    
    # Hi·ªÉn th·ªã h√¨nh g·ªëc
    image = pygame.transform.scale(game_data["original_image"], (180, 180))
    image_rect = image.get_rect(center=(sidebar.centerx, 420))
    screen.blit(image, image_rect)

    font_s = pygame.font.SysFont("Times New Roman", 23)
    if "compare_results" in game_data:
        y = 160  # ƒëi·ªÉm b·∫Øt ƒë·∫ßu v·∫Ω b√™n ph·∫£i
        for algo, (steps, explored, time_taken) in game_data["compare_results"].items():
            # In t√™n thu·∫≠t to√°n
            text_algo = font.render(f"{algo}:", True, (0, 0, 0))
            screen.blit(text_algo, (screen.get_width() - 200, y))
            y += 25

            # In s·ªë b∆∞·ªõc
            text_steps = font_s.render(f"B∆∞·ªõc: {steps}", True, (0, 0, 0))
            screen.blit(text_steps, (screen.get_width() - 195, y))
            y += 25

            # In s·ªë n√∫t duy·ªát
            text_explored = font_s.render(f"N√∫t duy·ªát: {explored}", True, (0, 0, 0))
            screen.blit(text_explored, (screen.get_width() - 195, y))
            y += 25

            # In th·ªùi gian
            text_time = font_s.render(f"Th·ªùi gian: {time_taken}s", True, (0, 0, 0))
            screen.blit(text_time, (screen.get_width() - 195, y))
            y += 35  # th√™m kho·∫£ng c√°ch tr∆∞·ªõc khi in thu·∫≠t to√°n ti·∫øp theo


    # Hi·ªÉn th·ªã th√¥ng b√°o ho√†n th√†nh
    if game_data.get("solved"):
        font_big = pygame.font.SysFont("Times New Roman", 40, True)
        win_text = font_big.render(" ! B·∫°n ƒë√£ ho√†n th√†nh !", True, (255, 215, 0))
        text_rect = win_text.get_rect(center=(screen.get_width() * 1.5 // 3, screen.get_height() // 2))
        screen.blit(win_text, text_rect)

    image = pygame.image.load("Image/puzzle.png")
    image = pygame.transform.scale(image, (80, 80))  
    screen.blit(image, (860, 5))

""" H√†m v·∫Ω b·∫£ng tr√≤ ch∆°i"""
def draw_board(puzzle_board, screen, game_data):
    board = puzzle_board.board
    empty_pos = puzzle_board.empty_pos
    grid_size = len(board)
    margin = 4
    font = pygame.font.SysFont(None, 48)

    # V√πng ch∆°i ·ªü gi·ªØa
    board_width = screen.get_width() * 3 // 4
    board_height = screen.get_height()
    tile_size = min(board_width // grid_size, board_height // grid_size) 

    start_x = screen.get_width() // 5 + 50
    start_y = 5

    for i in range(grid_size):
        for j in range(grid_size):
            value = board[i][j]

            rect = pygame.Rect(
                start_x + j * tile_size + margin,
                start_y + i * tile_size + margin,
                tile_size - 2 * margin,
                tile_size - 2 * margin
            )

            if value != 0 and game_data.get("tiles"):
                try:
                    tile_image = game_data["tiles"][value - 1]
                    screen.blit(pygame.transform.scale(tile_image, rect.size), rect)
                except IndexError:
                    # fallback n·∫øu danh s√°ch tiles kh√¥ng ƒë√∫ng
                    pygame.draw.rect(screen, (200, 200, 255), rect)
                    text = font.render(str(value), True, (0, 0, 0))
                    screen.blit(text, text.get_rect(center=rect.center))
            else:
                pygame.draw.rect(screen, (50, 50, 50), rect)

    # Hi·ªÉn th·ªã s·ªë b∆∞·ªõc
    font_step = pygame.font.SysFont("Times New Roman", 28, True)
    step_text = font_step.render(f"Steps: {puzzle_board.move_count}", True, (0, 0, 0))
    screen.blit(step_text, (40, 40))
    

""" H√†m click chu·ªôt ƒë·ªÉ di chuy·ªÉn tr√≤ ch∆°i """
def click_to_move(puzzle_board, pos, screen):
    board = puzzle_board.board
    # T√≠nh to√°n k√≠ch th∆∞·ªõc v√πng ch∆°i b√™n ph·∫£i
    board_width = screen.get_width() * 3 // 4
    board_height = screen.get_height()
    grid_size = len(board)
    # T√≠nh to√°n k√≠ch th∆∞·ªõc m·ªói √¥
    tile_size = min(board_width // grid_size, board_height // grid_size) 
    margin = 4 # kho·∫£ng c√°ch gi·ªØa c√°c √¥
    start_x = screen.get_width() // 4 + 50
    start_y = 5

    # Chuy·ªÉn t·ªça ƒë·ªô chu·ªôt v·ªÅ v·ªã tr√≠ trong b·∫£ng
    col = (pos[0] - start_x) // tile_size
    row = (pos[1] - start_y) // tile_size

    if not (0 <= row < len(board) and 0 <= col < len(board)):
        return  # click ngo√†i b·∫£ng

    if 0 <= row < grid_size and 0 <= col < grid_size:
        puzzle_board.move_tile((row, col))  # ‚úÖ D√πng ƒë√∫ng method ƒë·ªÉ tƒÉng move_count

""" H√†m x·ª≠ l√Ω s·ª± ki·ªán ·ªü c√°c n√∫t"""
def handle_game_events(event, game_data, reset_callback,set_state):
    if event.type == pygame.MOUSEBUTTONDOWN:
        pos = event.pos
        if support_btn.is_clicked(pos):
            run_ai_solution(pygame.display.get_surface(), game_data)
        elif reset_btn.is_clicked(pos):
            reset_callback()
            PuzzleBoard.move_count = 0
            game_data.pop("compare_results", None)
        elif quit_btn.is_clicked(pos):
            set_state("start")
            game_data.pop("compare_results", None)
        elif image_btn.is_clicked(pos):
            choose_image(game_data)
        elif heuristic_btn.is_clicked(pos):
            compare_astar_heuristics(game_data)
        else:
            if game_data["board"]:
                click_to_move(game_data["board"], pos, pygame.display.get_surface())
        

        if game_data["board"].is_goal() and not game_data["solved"]:
            game_data["solved"] = True
            game_data["end_time"] = time.time()
            print("üéâ B·∫°n ƒë√£ ho√†n th√†nh !")

""" H√†m ch·ªçn ·∫£nh b·∫•t k√¨ trong file ·∫£nh """
def get_random_image(image_folder="images"):
    images = [f for f in os.listdir(image_folder) if f.endswith((".jpg", ".png"))]
    image_path = os.path.join(image_folder, random.choice(images))
    return image_path

""" H√†m load ·∫£nh ƒë√£ ƒë∆∞·ª£c ch·ªçn l√™n giao di·ªán game"""
def load_tile_images(image_path, size, tile_size):
    image = pygame.image.load(image_path)
    image = pygame.transform.scale(image, (tile_size * size, tile_size * size))

    tiles = {}
    count = 1
    for row in range(size):
        for col in range(size):
            if count < size * size:
                rect = pygame.Rect(col * tile_size, row * tile_size, tile_size, tile_size)
                sub_img = image.subsurface(rect).copy()
                tiles[count] = sub_img
                count += 1
    return tiles, image  # tiles l√† dict: {1: img, 2: img, ..., size*size-1: img}

from tkinter import Tk, filedialog
from utils.image_utils import load_tile_images 

""" H√†m ch·ªçn ·∫£nh"""

def choose_image(game_data):
    # M·ªü h·ªôp tho·∫°i ch·ªçn ·∫£nh
    root = Tk()
    root.withdraw()  # ·∫®n c·ª≠a s·ªï tkinter g·ªëc
    filepath = filedialog.askopenfilename(
        filetypes=[("Image files", "*.jpg *.png *.jpeg *.bmp")]
    )
    root.destroy()

    if filepath:
        size = game_data.get("size", 3)
        tile_size = 100

        try:
            # Load ·∫£nh v√† chia th√†nh tile
            tiles, original = load_tile_images(filepath, size, tile_size)

            # C·∫≠p nh·∫≠t d·ªØ li·ªáu game
            game_data["tiles"] = tiles
            game_data["original_image"] = original

            # X√°o tr·ªôn board m·ªõi
            game_data["board"] = PuzzleBoard.generate_solvable_puzzle(size)
            game_data["start_time"] = time.time()
            game_data["solved"] = False

            print("ƒê√£ ch·ªçn ·∫£nh:", filepath)

        except Exception as e:
            print("L·ªói khi x·ª≠ l√Ω ·∫£nh:", e)

"""H√†m thi·∫øt l·∫≠p c√°c tham s·ªë v√† tr·∫°ng th√°i ban ƒë·∫ßu """
def setup_game(game_data):
    size = game_data.get("size", 3) # l·∫•y k√≠ch th∆∞·ªõc c·ªßa b·∫£ng tr√≤ ch∆°i t·ª´ game_data
    tile_size = 100

    game_data['start_time'] = time.time() # th·ªùi gian b·∫Øt ƒë·∫ßu tr√≤ ch∆°i
    game_data['board'] = PuzzleBoard.generate_solvable_puzzle(size, steps=100) # T·∫°o b·∫£ng puzzle

    image_path = get_random_image("images")   # Ch·ªçn v√† t·∫£i h√¨nh ·∫£nh ng·∫´u nhi√™n
    tiles, original_image = load_tile_images(image_path, size, tile_size) #T·∫£i v√† chia nh·ªè h√¨nh ·∫£nh
    
    #C·∫≠p nh·∫≠t d·ªØ li·ªáu 
    game_data['move_count'] = -1
    game_data["tiles"] = tiles  # dict: {1: img, ..., size*size - 1: img}
    game_data["original_image"] = original_image
    game_data["solved"] = False
    game_data["end_time"] = None

""" H√†m ch·∫°y thu·∫≠t to√°n t√¨m solution"""
def run_ai_solution(screen, game_data):
    board = game_data["board"]
    if board.is_goal():
        print("ƒê√£ ho√†n th√†nh r·ªìi!")
        return

    print("üîç AI ƒëang t√¨m l·ªùi gi·∫£i...")

    solution = a_star(board, heuristic_func=manhattan_distance) # G·ªçi thu·∫≠t to√°n A* v·ªõi manhattan ƒë·ªÉ ch·∫°y

    if solution is None:
        print("‚ùå Kh√¥ng t√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i.")
        return

    print(f"‚úÖ ƒê√£ t√¨m ƒë∆∞·ª£c l·ªùi gi·∫£i v·ªõi {len(solution)} b∆∞·ªõc.")

    # Hi·ªÉn th·ªã c√°c b∆∞·ªõc ch·∫°y thu·∫≠t to√°n
    for step in solution:
        game_data["board"].board = [row[:] for row in step.board]  # Copy board
        game_data["board"].empty_pos = step.empty_pos
        game_data["board"].move_count += 1  # C·ªông d·ªìn s·ªë b∆∞·ªõc

        draw_game_screen(screen, game_data)
        pygame.display.update()
        pygame.time.delay(500)  # Delay m·ªói b∆∞·ªõc 1000ms

""" H√†m ch·∫°y c√°c h√†m heuristic"""
def compare_astar_heuristics(game_data):
    base = PuzzleBoard(copy.deepcopy(game_data["board"].board)) # l·∫•y board hi·ªán t·∫°i

    results = {}

    # Manhattan
    start = time.time()
    path_manhattan, explored_manhattan = a_star(base, heuristic_func=manhattan_distance, return_explored=True)
    end = time.time()
    steps_manhattan = len(path_manhattan) if path_manhattan else 0
    time_manhattan = round(end - start, 4)
    results["Manhattan"] = (steps_manhattan, explored_manhattan, time_manhattan)

    # Misplaced Tiles
    start = time.time()
    path_misplaced, explored_misplaced = a_star(base, heuristic_func=misplaced_tiles, return_explored=True)
    end = time.time()
    steps_misplaced = len(path_misplaced) if path_misplaced else 0
    time_misplaced = round(end - start, 4)
    results["Misplaced"] = (steps_misplaced, explored_misplaced, time_misplaced)

    #  Tiles Out of Row/Column
    start = time.time()
    path_tiles_out, explored_tiles_out = a_star(base, heuristic_func=tiles_out_of_row_and_column, return_explored=True)
    end = time.time()
    steps_tiles_out = len(path_tiles_out) if path_tiles_out else 0
    time_tiles_out = round(end - start,4)
    results["Tiles Out"] = (steps_tiles_out,explored_tiles_out, time_tiles_out)
    
    # L∆∞u k·∫øt qu·∫£ v√†o game_data
    game_data["compare_results"] = results